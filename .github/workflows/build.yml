name: Build Test and Release AWS Lambda Layer for PyODBC

on:
  push:
    branches:
      - main
      - feature/**
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - feature/**

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        msodbc_version: ["17", "18"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker al2 image for AWS Lambda layer
        run: |
          docker build -f Dockerfile-al2\
            --build-arg PYTHON_VERSIONS="3.9,3.10,3.11,3.12" \
            --build-arg MSODBC_VERSION=${{ matrix.msodbc_version }} \
            --build-arg UNIXODBC_VERSION=${{ matrix.unixodbc_version }} \
            -t pyodbc-lambda-layer:multi-python-al2 .

      - name: Build Docker al2023 image for AWS Lambda layer
        run: |
          docker build -f Dockerfile-al2023\
            --build-arg PYTHON_VERSIONS="3.13" \
            --build-arg MSODBC_VERSION=${{ matrix.msodbc_version }} \
            --build-arg UNIXODBC_VERSION=${{ matrix.unixodbc_version }} \
            -t pyodbc-lambda-layer:multi-python-al2023 .

      - name: Create Container and Copy Artifacts
        run: |
          CONTAINER_AL2_ID=$(docker create pyodbc-lambda-layer:multi-python-al2)
          CONTAINER_AL2023_ID=$(docker create pyodbc-lambda-layer:multi-python-al2023)
          docker cp $CONTAINER_AL2_ID:/opt/artifacts/. .
          docker cp $CONTAINER_AL2023_ID:/opt/artifacts/. .
          docker rm $CONTAINER_AL2_ID
          docker rm $CONTAINER_AL2023_ID

      - name: Upload PyODBC layer zip as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pyodbc-layer-multi-python-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}
          path: pyodbc-layer-*.zip
          retention-days: 1

  test:
    env:
      MSSQL_SERVER_VERSION: 2022-latest
      MSSQL_SA_PASSWORD: yourStrong(@)Password

    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        python_version: ["3.9", "3.10", "3.11", "3.12"]
        msodbc_version: ["17", "18"]
        unixodbc_version: ["2.3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Docker network
        run: |
          docker network create lambda-network

      - name: Start MSSQL container on the custom network
        run: |
          docker run -d \
            --name mssql \
            --network lambda-network \
            -e ACCEPT_EULA=Y \
            -e MSSQL_SA_PASSWORD="${{ env.MSSQL_SA_PASSWORD }}" \
            -p 1433:1433 \
            mcr.microsoft.com/mssql/server:${{ env.MSSQL_SERVER_VERSION }}

      - name: Wait for MSSQL to be ready (Health Check)
        run: |
          chmod +x test/check_mssql.sh
          ./test/check_mssql.sh

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true

      - name: Unzip Lambda layer
        run: |
          unzip pyodbc-layer/pyodbc-layer-${{ matrix.python_version }}-mssql${{ matrix.msodbc_version }}-unixODBC${{ matrix.unixodbc_version }}.zip -d pyodbc-layer

      - name: Copy Lambda function into Docker container
        run: |
          cp lambda/lambda_function.py .

      - name: Download and Install AWS Lambda RIE
        run: |
          curl -Lo aws-lambda-rie https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie
          chmod +x aws-lambda-rie
          mv aws-lambda-rie /usr/local/bin/aws-lambda-rie

      - name: Test Lambda with MSSQL
        run: |
          docker run -d \
            --network lambda-network \
            --entrypoint /usr/local/bin/aws-lambda-rie \
            -v $(pwd)/pyodbc-layer:/opt \
            -v $(pwd)/lambda_function.py:/var/task/lambda_function.py \
            -e MSSQL_SA_PASSWORD="${{ env.MSSQL_SA_PASSWORD }}" \
            -p 9000:8080 \
            public.ecr.aws/lambda/python:${{ matrix.python_version }} \
            /var/runtime/bootstrap lambda_function.lambda_handler

          sleep 10

          chmod +x test/check_lambda.sh
          ./test/check_lambda.sh ${{ matrix.msodbc_version }}

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          path: pyodbc-layer
          pattern: pyodbc-layer-*
          merge-multiple: true

      - run: ls -R pyodbc-layer

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "pyodbc-layer/pyodbc-layer-*.zip"
          tag: ${{ github.ref_name }}
          generateReleaseNotes: true
          body: |
            # AWS Lambda Layer Release - PyODBC for MSSQL

            We are excited to announce the release of the AWS Lambda layer artifacts that provide seamless connectivity to Microsoft SQL Server databases using the [pyodbc](https://pypi.org/project/pyodbc) library.

            This release includes version-specific zip files tailored for various combinations of Python versions, Microsoft ODBC driver versions, and UNIXODBC versions. You can use these artifacts to easily integrate SQL Server connectivity into your AWS Lambda functions without the hassle of manual configuration.

            ### Available packages for this release:

              - **pyodbc-layer-3.9-mssql18-unixODBC2.3.12.zip**: For Python 3.9 with Microsoft ODBC Driver 18 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.9-mssql17-unixODBC2.3.12.zip**: For Python 3.9 with Microsoft ODBC Driver 17 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.10-mssql18-unixODBC2.3.12.zip**: For Python 3.10 with Microsoft ODBC Driver 18 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.10-mssql17-unixODBC2.3.12.zip**: For Python 3.10 with Microsoft ODBC Driver 17 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.11-mssql18-unixODBC2.3.12.zip**: For Python 3.11 with Microsoft ODBC Driver 18 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.11-mssql17-unixODBC2.3.12.zip**: For Python 3.11 with Microsoft ODBC Driver 17 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.12-mssql18-unixODBC2.3.12.zip**: For Python 3.12 with Microsoft ODBC Driver 18 and UNIXODBC 2.3.12.
              - **pyodbc-layer-3.12-mssql17-unixODBC2.3.12.zip**: For Python 3.12 with Microsoft ODBC Driver 17 and UNIXODBC 2.3.12.

            ### Key Features:
            - **Automated CI/CD**: Our GitHub Actions CI/CD pipeline ensures that the latest Lambda layer artifacts are consistently built, tested, and released whenever new versions are pushed.
            - **Effortless Integration**: Simply download the pre-built zip files from the GitHub releases section and attach them to your AWS Lambda functions.

            To get started, refer to the [Usage](README.md#usage) section in the README for detailed steps on downloading and integrating the layers into your Lambda functions.

            Thank you for using our AWS Lambda layers for PyODBC with Microsoft SQL Server. We look forward to supporting your serverless applications!
